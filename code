#define in1  23
#define in2  22
#define in3  19
#define in4  18

const int stepsPerRevolution = 2048; 
const int stepDelay = 3; 

int stepState = 0;
float currentAngle = 0.0; 

void singleStep(bool forward);
void stepForward(int steps);
void stepBackward(int steps);
void moveToAngle(float targetAngle);
void moveToItem(int target);

void setup() {
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);

  Serial.begin(115200);
  Serial.println();
  Serial.println("Welcome to the Item Selector Machine! .◕‿◕. ");
  Serial.println("[1] : Item");
  Serial.println("[2] : Item");
  Serial.println("[3] : Item");
  Serial.println("[4] : Item");
  Serial.println("[5] : Item");
  Serial.println("[6] : Item");

  Serial.println("(O_o) Please select Item (1-6): ");
}

void loop() {

  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');
    input.trim();

    float target = input.toFloat();

    if (target > 0 && target <= 6) {
      Serial.print("Moving to [");
      Serial.print(target);
      Serial.println("]...");

      moveToItem(target);

      Serial.println("Movement complete.");
    } else {
      Serial.println("Invalid input. Please enter a value between 1 and 6.");
    }
  }

  delay(1000);
}

void singleStep(bool forward) {
  static const int stepSequence[4][4] = {
    {HIGH, LOW, LOW, LOW},  // Step 1
    {LOW, HIGH, LOW, LOW},  // Step 2
    {LOW, LOW, HIGH, LOW},  // Step 3
    {LOW, LOW, LOW, HIGH}   // Step 4
  };

  stepState = (forward) ? (stepState + 1) % 4 : (stepState + 3) % 4;

  digitalWrite(in1, stepSequence[stepState][0]);
  digitalWrite(in2, stepSequence[stepState][1]);
  digitalWrite(in3, stepSequence[stepState][2]);
  digitalWrite(in4, stepSequence[stepState][3]);

  delay(stepDelay);
}

void stepForward(int steps) {
  for (int i = 0; i < steps; i++) {
    singleStep(true);
  }
}

void stepBackward(int steps) {
  for (int i = 0; i < steps; i++) {
    singleStep(false);
  }
}

void moveToAngle(float targetAngle) {
  float angleDifference = targetAngle - currentAngle;
  if (angleDifference > 180) angleDifference -= 360;
  if (angleDifference < -180) angleDifference += 360;

  int steps = (int)(stepsPerRevolution * (angleDifference / 360.0));
  if (steps > 0) {
    stepForward(steps);
  } else if (steps < 0) {
    stepBackward(-steps);
  }

  currentAngle = targetAngle;
}

void moveToItem(int target){
  if (target == 1) {
    moveToAngle(0);
  } else if (target == 2) {
    moveToAngle(1*360.0/6.0);
  } else if (target == 3) {
    moveToAngle(2*360.0/6.0);
  } else if (target == 4) {
    moveToAngle(3*360.0/6.0);
  } else if (target == 5) {
    moveToAngle(4*360.0/6.0);
  } else if (target == 6) {
    moveToAngle(5*360.0/6.0);
  } else {
    Serial.println("Invalid!! Please enter number 1 - 6.    (｡•́︿•̀｡)");
  }
}
